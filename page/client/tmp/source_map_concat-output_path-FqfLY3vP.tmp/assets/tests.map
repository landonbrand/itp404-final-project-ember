{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","page/tests/app.jshint.js","page/tests/components/class-list-item.jshint.js","page/tests/components/class-list.jshint.js","page/tests/components/css-rules.jshint.js","page/tests/components/nav-bar.jshint.js","page/tests/components/side-bar.jshint.js","page/tests/components/tag-id.jshint.js","page/tests/components/tag-name.jshint.js","page/tests/controllers/dashboard.jshint.js","page/tests/controllers/editing-tests.jshint.js","page/tests/controllers/page.jshint.js","page/tests/helpers/class-id.jshint.js","page/tests/helpers/destroy-app.js","page/tests/helpers/destroy-app.jshint.js","page/tests/helpers/fill-content-editable.js","page/tests/helpers/module-for-acceptance.js","page/tests/helpers/module-for-acceptance.jshint.js","page/tests/helpers/register-helpers.js","page/tests/helpers/resolver.js","page/tests/helpers/resolver.jshint.js","page/tests/helpers/start-app.js","page/tests/helpers/start-app.jshint.js","page/tests/helpers/tag-start.jshint.js","page/tests/integration/components/class-list-item-test.js","page/tests/integration/components/class-list-item-test.jshint.js","page/tests/integration/components/class-list-test.js","page/tests/integration/components/class-list-test.jshint.js","page/tests/integration/components/css-rules-test.js","page/tests/integration/components/css-rules-test.jshint.js","page/tests/integration/components/nav-bar-test.js","page/tests/integration/components/nav-bar-test.jshint.js","page/tests/integration/components/side-bar-test.js","page/tests/integration/components/side-bar-test.jshint.js","page/tests/integration/components/tag-id-test.js","page/tests/integration/components/tag-id-test.jshint.js","page/tests/integration/components/tag-name-test.js","page/tests/integration/components/tag-name-test.jshint.js","page/tests/resolver.jshint.js","page/tests/router.jshint.js","page/tests/routes/about.jshint.js","page/tests/routes/create.jshint.js","page/tests/routes/dashboard.jshint.js","page/tests/routes/editing-tests.jshint.js","page/tests/routes/home.jshint.js","page/tests/routes/login.jshint.js","page/tests/routes/navtest.jshint.js","page/tests/routes/page.jshint.js","page/tests/routes/signup.jshint.js","page/tests/routes/template-tests.jshint.js","page/tests/test-helper.js","page/tests/test-helper.jshint.js","page/tests/unit/controllers/dashboard-test.js","page/tests/unit/controllers/dashboard-test.jshint.js","page/tests/unit/controllers/editing-tests-test.js","page/tests/unit/controllers/editing-tests-test.jshint.js","page/tests/unit/controllers/page-test.js","page/tests/unit/controllers/page-test.jshint.js","page/tests/unit/helpers/class-id-test.js","page/tests/unit/helpers/class-id-test.jshint.js","page/tests/unit/helpers/tag-start-test.js","page/tests/unit/helpers/tag-start-test.jshint.js","page/tests/unit/routes/about-test.js","page/tests/unit/routes/about-test.jshint.js","page/tests/unit/routes/create-test.js","page/tests/unit/routes/create-test.jshint.js","page/tests/unit/routes/dashboard-test.js","page/tests/unit/routes/dashboard-test.jshint.js","page/tests/unit/routes/editing-tests-test.js","page/tests/unit/routes/editing-tests-test.jshint.js","page/tests/unit/routes/home-test.js","page/tests/unit/routes/home-test.jshint.js","page/tests/unit/routes/login-test.js","page/tests/unit/routes/login-test.jshint.js","page/tests/unit/routes/navtest-test.js","page/tests/unit/routes/navtest-test.jshint.js","page/tests/unit/routes/page-test.js","page/tests/unit/routes/page-test.jshint.js","page/tests/unit/routes/signup-test.js","page/tests/unit/routes/signup-test.jshint.js","page/tests/unit/routes/template-tests-test.js","page/tests/unit/routes/template-tests-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('page/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('page/tests/components/class-list-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/class-list-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/class-list-item.js should pass jshint.\\ncomponents/class-list-item.js: line 5, col 32, Expected \\'===\\' and instead saw \\'==\\'.\\n\\n1 error');\n  });\n});","define('page/tests/components/class-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/class-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/class-list.js should pass jshint.');\n  });\n});","define('page/tests/components/css-rules.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/css-rules.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/css-rules.js should pass jshint.\\ncomponents/css-rules.js: line 22, col 31, \\'event\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('page/tests/components/nav-bar.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/nav-bar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-bar.js should pass jshint.');\n  });\n});","define('page/tests/components/side-bar.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/side-bar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/side-bar.js should pass jshint.');\n  });\n});","define('page/tests/components/tag-id.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/tag-id.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tag-id.js should pass jshint.');\n  });\n});","define('page/tests/components/tag-name.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/tag-name.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tag-name.js should pass jshint.');\n  });\n});","define('page/tests/controllers/dashboard.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/dashboard.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/dashboard.js should pass jshint.\\ncontrollers/dashboard.js: line 56, col 18, Expected \\'{\\' and instead saw \\'return\\'.\\ncontrollers/dashboard.js: line 57, col 54, Missing semicolon.\\ncontrollers/dashboard.js: line 51, col 32, \\'e\\' is defined but never used.\\ncontrollers/dashboard.js: line 80, col 8, Missing semicolon.\\ncontrollers/dashboard.js: line 90, col 2, Expected \\'}\\' to match \\'{\\' from line 3 and instead saw \\')\\'.\\ncontrollers/dashboard.js: line 90, col 3, Expected \\')\\' and instead saw \\';\\'.\\ncontrollers/dashboard.js: line 90, col 4, Missing semicolon.\\ncontrollers/dashboard.js: line 5, col 15, \\'Auth0\\' is not defined.\\ncontrollers/dashboard.js: line 81, col 22, \\'$\\' is not defined.\\n\\n9 errors');\n  });\n});","define('page/tests/controllers/editing-tests.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/editing-tests.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/editing-tests.js should pass jshint.\\ncontrollers/editing-tests.js: line 37, col 47, Missing semicolon.\\ncontrollers/editing-tests.js: line 41, col 17, \\'i\\' is already defined.\\ncontrollers/editing-tests.js: line 51, col 14, \\'pageCSS\\' used out of scope.\\ncontrollers/editing-tests.js: line 161, col 76, Expected \\'!==\\' and instead saw \\'!=\\'.\\ncontrollers/editing-tests.js: line 161, col 86, Missing semicolon.\\ncontrollers/editing-tests.js: line 179, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 180, col 25, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 180, col 44, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 201, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 215, col 47, Expected \\'!==\\' and instead saw \\'!=\\'.\\ncontrollers/editing-tests.js: line 226, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 226, col 12, Confusing use of \\'!\\'.\\ncontrollers/editing-tests.js: line 241, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 243, col 35, Missing semicolon.\\ncontrollers/editing-tests.js: line 250, col 46, Missing semicolon.\\ncontrollers/editing-tests.js: line 299, col 42, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 307, col 34, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 331, col 47, The \\'__proto__\\' property is deprecated.\\ncontrollers/editing-tests.js: line 340, col 28, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 345, col 28, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 372, col 2, Missing semicolon.\\ncontrollers/editing-tests.js: line 376, col 18, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 381, col 2, Missing semicolon.\\ncontrollers/editing-tests.js: line 384, col 19, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/editing-tests.js: line 430, col 2, Missing semicolon.\\ncontrollers/editing-tests.js: line 53, col 22, \\'$\\' is not defined.\\ncontrollers/editing-tests.js: line 404, col 16, \\'$\\' is not defined.\\ncontrollers/editing-tests.js: line 377, col 22, \\'Page\\' is not defined.\\ncontrollers/editing-tests.js: line 386, col 22, \\'Page\\' is not defined.\\ncontrollers/editing-tests.js: line 2, col 8, \\'ClassListItemComponent\\' is defined but never used.\\ncontrollers/editing-tests.js: line 330, col 10, \\'byValue\\' is defined but never used.\\n\\n31 errors');\n  });\n});","define('page/tests/controllers/page.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/page.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/page.js should pass jshint.\\ncontrollers/page.js: line 36, col 47, Missing semicolon.\\ncontrollers/page.js: line 40, col 17, \\'i\\' is already defined.\\ncontrollers/page.js: line 50, col 14, \\'pageCSS\\' used out of scope.\\ncontrollers/page.js: line 160, col 76, Expected \\'!==\\' and instead saw \\'!=\\'.\\ncontrollers/page.js: line 160, col 86, Missing semicolon.\\ncontrollers/page.js: line 178, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 179, col 25, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 179, col 44, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 200, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 214, col 47, Expected \\'!==\\' and instead saw \\'!=\\'.\\ncontrollers/page.js: line 225, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 225, col 12, Confusing use of \\'!\\'.\\ncontrollers/page.js: line 240, col 50, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 242, col 35, Missing semicolon.\\ncontrollers/page.js: line 249, col 46, Missing semicolon.\\ncontrollers/page.js: line 298, col 42, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 306, col 34, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 330, col 47, The \\'__proto__\\' property is deprecated.\\ncontrollers/page.js: line 339, col 28, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 344, col 28, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 371, col 2, Missing semicolon.\\ncontrollers/page.js: line 375, col 18, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 380, col 2, Missing semicolon.\\ncontrollers/page.js: line 383, col 19, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/page.js: line 429, col 2, Missing semicolon.\\ncontrollers/page.js: line 52, col 22, \\'$\\' is not defined.\\ncontrollers/page.js: line 403, col 16, \\'$\\' is not defined.\\ncontrollers/page.js: line 376, col 22, \\'Page\\' is not defined.\\ncontrollers/page.js: line 385, col 22, \\'Page\\' is not defined.\\ncontrollers/page.js: line 2, col 8, \\'ClassListItemComponent\\' is defined but never used.\\ncontrollers/page.js: line 329, col 10, \\'byValue\\' is defined but never used.\\n\\n31 errors');\n  });\n});","define('page/tests/helpers/class-id.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/class-id.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/class-id.js should pass jshint.');\n  });\n});","define('page/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('page/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('page/tests/helpers/fill-content-editable', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = function (app, selector, content) {\n    return andThen(function () {\n      return app.testHelpers.click(selector);\n    }).then(function () {\n      $(selector).html(content);\n      return app.testHelpers.keyEvent(selector, 'keyup', 13);\n    }).then(function () {\n      return app.testHelpers.triggerEvent(selector, 'blur');\n    });\n  };\n});","define('page/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'page/tests/helpers/start-app', 'page/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _pageTestsHelpersStartApp, _pageTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _pageTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _pageTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('page/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('page/tests/helpers/register-helpers', ['exports', 'ember', 'page/tests/helpers/fill-content-editable'], function (exports, _ember, _pageTestsHelpersFillContentEditable) {\n  var registerAsyncHelper = _ember['default'].Test.registerAsyncHelper;\n\n  exports['default'] = function () {\n    registerAsyncHelper('fillContentEditable', _pageTestsHelpersFillContentEditable['default']);\n  };\n});","define('page/tests/helpers/resolver', ['exports', 'page/resolver', 'page/config/environment'], function (exports, _pageResolver, _pageConfigEnvironment) {\n\n  var resolver = _pageResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _pageConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _pageConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('page/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('page/tests/helpers/start-app', ['exports', 'ember', 'page/app', 'page/config/environment'], function (exports, _ember, _pageApp, _pageConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _pageConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _pageApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('page/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('page/tests/helpers/tag-start.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/tag-start.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/tag-start.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/class-list-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('class-list-item', 'Integration | Component | class list item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'class-list-item', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'class-list-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/class-list-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/class-list-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/class-list-item-test.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/class-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('class-list', 'Integration | Component | class list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'class-list', ['loc', [null, [1, 0], [1, 14]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'class-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/class-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/class-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/class-list-test.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/css-rules-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('css-rules', 'Integration | Component | css rules', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'css-rules', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'css-rules', [], [], 0, null, ['loc', [null, [2, 4], [4, 18]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/css-rules-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/css-rules-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/css-rules-test.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/nav-bar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('nav-bar', 'Integration | Component | nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'nav-bar', ['loc', [null, [1, 0], [1, 11]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'nav-bar', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/nav-bar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/nav-bar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-bar-test.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/side-bar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('side-bar', 'Integration | Component | side bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'side-bar', ['loc', [null, [1, 0], [1, 12]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'side-bar', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/side-bar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/side-bar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/side-bar-test.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/tag-id-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tag-id', 'Integration | Component | tag id', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 10\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tag-id', ['loc', [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'tag-id', [], [], 0, null, ['loc', [null, [2, 4], [4, 15]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/tag-id-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/tag-id-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tag-id-test.js should pass jshint.');\n  });\n});","define('page/tests/integration/components/tag-name-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tag-name', 'Integration | Component | tag name', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tag-name', ['loc', [null, [1, 0], [1, 12]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'tag-name', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('page/tests/integration/components/tag-name-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/tag-name-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tag-name-test.js should pass jshint.');\n  });\n});","define('page/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('page/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('page/tests/routes/about.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/about.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass jshint.');\n  });\n});","define('page/tests/routes/create.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create.js should pass jshint.');\n  });\n});","define('page/tests/routes/dashboard.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/dashboard.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboard.js should pass jshint.\\nroutes/dashboard.js: line 6, col 33, Missing semicolon.\\nroutes/dashboard.js: line 11, col 16, Missing semicolon.\\nroutes/dashboard.js: line 16, col 17, Expected \\'===\\' and instead saw \\'==\\'.\\nroutes/dashboard.js: line 16, col 29, Expected \\'{\\' and instead saw \\'callback\\'.\\nroutes/dashboard.js: line 25, col 20, Missing semicolon.\\nroutes/dashboard.js: line 28, col 19, Missing semicolon.\\nroutes/dashboard.js: line 31, col 2, Missing semicolon.\\nroutes/dashboard.js: line 15, col 1, \\'jQuery\\' is not defined.\\nroutes/dashboard.js: line 17, col 10, \\'$\\' is not defined.\\n\\n9 errors');\n  });\n});","define('page/tests/routes/editing-tests.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/editing-tests.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/editing-tests.js should pass jshint.\\nroutes/editing-tests.js: line 5, col 9, \\'cursorPos\\' is defined but never used.\\nroutes/editing-tests.js: line 6, col 9, \\'nodes\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('page/tests/routes/home.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/home.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass jshint.');\n  });\n});","define('page/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('page/tests/routes/navtest.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/navtest.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/navtest.js should pass jshint.');\n  });\n});","define('page/tests/routes/page.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/page.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/page.js should pass jshint.\\nroutes/page.js: line 5, col 9, \\'cursorPos\\' is defined but never used.\\nroutes/page.js: line 6, col 9, \\'nodes\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('page/tests/routes/signup.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/signup.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/signup.js should pass jshint.\\nroutes/signup.js: line 12, col 33, Missing semicolon.\\nroutes/signup.js: line 17, col 16, Missing semicolon.\\nroutes/signup.js: line 39, col 18, Expected \\'{\\' and instead saw \\'return\\'.\\nroutes/signup.js: line 40, col 54, Missing semicolon.\\nroutes/signup.js: line 20, col 32, \\'e\\' is defined but never used.\\nroutes/signup.js: line 47, col 17, Expected \\'===\\' and instead saw \\'==\\'.\\nroutes/signup.js: line 47, col 29, Expected \\'{\\' and instead saw \\'callback\\'.\\nroutes/signup.js: line 56, col 20, Missing semicolon.\\nroutes/signup.js: line 59, col 19, Missing semicolon.\\nroutes/signup.js: line 62, col 2, Missing semicolon.\\nroutes/signup.js: line 5, col 15, \\'Auth0\\' is not defined.\\nroutes/signup.js: line 46, col 1, \\'jQuery\\' is not defined.\\nroutes/signup.js: line 48, col 10, \\'$\\' is not defined.\\n\\n13 errors');\n  });\n});","define('page/tests/routes/template-tests.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/template-tests.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/template-tests.js should pass jshint.\\nroutes/template-tests.js: line 5, col 9, \\'nodes\\' is defined but never used.\\nroutes/template-tests.js: line 7, col 20, \\'$\\' is not defined.\\n\\n2 errors');\n  });\n});","define('page/tests/test-helper', ['exports', 'page/tests/helpers/resolver', 'ember-qunit'], function (exports, _pageTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_pageTestsHelpersResolver['default']);\n});","define('page/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('page/tests/unit/controllers/dashboard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:dashboard', 'Unit | Controller | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('page/tests/unit/controllers/dashboard-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/dashboard-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/dashboard-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/controllers/editing-tests-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:editing-tests', 'Unit | Controller | editing tests', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('page/tests/unit/controllers/editing-tests-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/editing-tests-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/editing-tests-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/controllers/page-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:page', 'Unit | Controller | page', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('page/tests/unit/controllers/page-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/page-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/helpers/class-id-test', ['exports', 'page/helpers/class-id', 'qunit'], function (exports, _pageHelpersClassId, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | class id');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _pageHelpersClassId.classId)([42]);\n    assert.ok(result);\n  });\n});","define('page/tests/unit/helpers/class-id-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/class-id-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/class-id-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/helpers/tag-start-test', ['exports', 'page/helpers/tag-start', 'qunit'], function (exports, _pageHelpersTagStart, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | tag start');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _pageHelpersTagStart.tagStart)([42]);\n    assert.ok(result);\n  });\n});","define('page/tests/unit/helpers/tag-start-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/tag-start-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tag-start-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/about-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/about-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/create-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:create', 'Unit | Route | create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/create-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/create-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/dashboard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/dashboard-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/dashboard-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/editing-tests-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:editing-tests', 'Unit | Route | editing tests', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/editing-tests-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/editing-tests-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/editing-tests-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/home-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/home-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/home-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/navtest-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:navtest', 'Unit | Route | navtest', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/navtest-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/navtest-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/navtest-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/page-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:page', 'Unit | Route | page', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/page-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/page-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/signup-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:signup', 'Unit | Route | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/signup-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/signup-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/signup-test.js should pass jshint.');\n  });\n});","define('page/tests/unit/routes/template-tests-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:template-tests', 'Unit | Route | template tests', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('page/tests/unit/routes/template-tests-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/template-tests-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/template-tests-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('page/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjjjjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjjfile":"tests.js"}